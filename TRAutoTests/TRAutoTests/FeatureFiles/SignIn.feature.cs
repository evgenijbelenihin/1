// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TRAutoTests.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Sign In")]
    public partial class SignInFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SignIn.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sign In", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does Sign In page open")]
        [NUnit.Framework.CategoryAttribute("OpenSignInPage")]
        public virtual void DoesSignInPageOpen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does Sign In page open", null, new string[] {
                        "OpenSignInPage"});
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 testRunner.Given("I have an URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("Sign In page is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does title of page exist with name")]
        [NUnit.Framework.CategoryAttribute("DoesTitleOfPageExistWithName")]
        public virtual void DoesTitleOfPageExistWithName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does title of page exist with name", null, new string[] {
                        "DoesTitleOfPageExistWithName"});
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 14
 testRunner.Given("I have an URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("Title of page named \'Authorization\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does logo exist")]
        [NUnit.Framework.CategoryAttribute("DoesLogoExist")]
        public virtual void DoesLogoExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does logo exist", null, new string[] {
                        "DoesLogoExist"});
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 20
 testRunner.Given("I have an URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("Logo is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does email input exist")]
        [NUnit.Framework.CategoryAttribute("DoesEmailInputExist")]
        public virtual void DoesEmailInputExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does email input exist", null, new string[] {
                        "DoesEmailInputExist"});
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 26
 testRunner.Given("I have an URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("Email input exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does password input exist")]
        [NUnit.Framework.CategoryAttribute("DoesPasswordInputExist")]
        public virtual void DoesPasswordInputExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does password input exist", null, new string[] {
                        "DoesPasswordInputExist"});
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 32
 testRunner.Given("I have an URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("Password input exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does exist Sign In button")]
        [NUnit.Framework.CategoryAttribute("DoesExistSignInButton")]
        public virtual void DoesExistSignInButton()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does exist Sign In button", null, new string[] {
                        "DoesExistSignInButton"});
#line 37
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 38
 testRunner.Given("I have an URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("Sign In button exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does exist Sign Up button")]
        [NUnit.Framework.CategoryAttribute("DoesExistSignUpButton")]
        public virtual void DoesExistSignUpButton()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does exist Sign Up button", null, new string[] {
                        "DoesExistSignUpButton"});
#line 43
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 44
 testRunner.Given("I have an URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("Sign Up button exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Name of Sign In button")]
        [NUnit.Framework.CategoryAttribute("NameOfSignInButton")]
        public virtual void NameOfSignInButton()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Name of Sign In button", null, new string[] {
                        "NameOfSignInButton"});
#line 49
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 50
 testRunner.Given("I have an URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("Name of Sign In button is \'SIGN IN\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Name of Sign Up button")]
        [NUnit.Framework.CategoryAttribute("NameOfSignUpButton")]
        public virtual void NameOfSignUpButton()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Name of Sign Up button", null, new string[] {
                        "NameOfSignUpButton"});
#line 55
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 56
 testRunner.Given("I have an URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("Name of Sign Up button is \'REGISTRATION\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does possible to fill 30 symbols to email field")]
        [NUnit.Framework.CategoryAttribute("DoesPossibleToFillSymbolsToEmailField")]
        public virtual void DoesPossibleToFill30SymbolsToEmailField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does possible to fill 30 symbols to email field", null, new string[] {
                        "DoesPossibleToFillSymbolsToEmailField"});
#line 61
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 62
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
 testRunner.When("I fill 30 symbols to email input field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
 testRunner.Then("In email input field is exist 30 symbols", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does impossible to fill 31 symbols to email field")]
        [NUnit.Framework.CategoryAttribute("DoesPossibleToFillSymbolsToEmailField")]
        public virtual void DoesImpossibleToFill31SymbolsToEmailField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does impossible to fill 31 symbols to email field", null, new string[] {
                        "DoesPossibleToFillSymbolsToEmailField"});
#line 67
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 68
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
 testRunner.When("I fill 31 symbols to email input field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("In email input field is exist 30 symbols", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does possible to fill 20 symbols to password field")]
        [NUnit.Framework.CategoryAttribute("DoesPossibleToFillSymbolsToPasswordField")]
        public virtual void DoesPossibleToFill20SymbolsToPasswordField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does possible to fill 20 symbols to password field", null, new string[] {
                        "DoesPossibleToFillSymbolsToPasswordField"});
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 74
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
 testRunner.When("I fill 30 symbols to password input field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("In password input field is exist 30 symbols", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does possible to fill 5 symbols to password field")]
        [NUnit.Framework.CategoryAttribute("DoesPossibleToFillSymbolsToPasswordField")]
        public virtual void DoesPossibleToFill5SymbolsToPasswordField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does possible to fill 5 symbols to password field", null, new string[] {
                        "DoesPossibleToFillSymbolsToPasswordField"});
#line 79
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 80
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
 testRunner.When("I fill 5 symbols to password input field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.Then("In password input field is exist 5 symbols", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does possible to fill 31 symbols to password field")]
        [NUnit.Framework.CategoryAttribute("DoesPossibleToFillSymbolsToPasswordField")]
        public virtual void DoesPossibleToFill31SymbolsToPasswordField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does possible to fill 31 symbols to password field", null, new string[] {
                        "DoesPossibleToFillSymbolsToPasswordField"});
#line 85
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 86
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 87
 testRunner.When("I fill 31 symbols to password input field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.Then("In password input field is exist 30 symbols", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does possible to Sign In with not registered data")]
        [NUnit.Framework.CategoryAttribute("DoesPossibleToSignInWithAnyData")]
        public virtual void DoesPossibleToSignInWithNotRegisteredData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does possible to Sign In with not registered data", null, new string[] {
                        "DoesPossibleToSignInWithAnyData"});
#line 91
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 92
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
 testRunner.When("I fill in email field \'blablabla@bla.bla\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.And("I fill in password field \'blablabla\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("I press Sign In button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.Then("I do not sign in to account and got error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does symbols hidden in password field")]
        [NUnit.Framework.CategoryAttribute("DoesSymbolsHiddenInPasswordField")]
        public virtual void DoesSymbolsHiddenInPasswordField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does symbols hidden in password field", null, new string[] {
                        "DoesSymbolsHiddenInPasswordField"});
#line 99
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 100
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 101
 testRunner.Then("Password input field has password type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does possible to sign in with registered data")]
        [NUnit.Framework.CategoryAttribute("DoesPossibleToSignInWithCorrectData")]
        public virtual void DoesPossibleToSignInWithRegisteredData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does possible to sign in with registered data", null, new string[] {
                        "DoesPossibleToSignInWithCorrectData"});
#line 104
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 105
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 106
 testRunner.When("I fill in email field \'qweqwe@qwe.qwe\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.And("I fill in password field \'qweqwe\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.And("I press Sign In button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.Then("I successfully signed in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does after click Sign Up button page opens")]
        [NUnit.Framework.CategoryAttribute("DoesAfterClickSignUpButtonPageOpens")]
        public virtual void DoesAfterClickSignUpButtonPageOpens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does after click Sign Up button page opens", null, new string[] {
                        "DoesAfterClickSignUpButtonPageOpens"});
#line 112
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 113
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
 testRunner.When("I press Sign Up button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
 testRunner.Then("Sign Up page is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does possible to sign in with empty email field")]
        [NUnit.Framework.CategoryAttribute("DoesPossibleToSignInWithEmptyEmailField")]
        public virtual void DoesPossibleToSignInWithEmptyEmailField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does possible to sign in with empty email field", null, new string[] {
                        "DoesPossibleToSignInWithEmptyEmailField"});
#line 118
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 119
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 120
 testRunner.When("I fill in email field \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
 testRunner.And("I fill in password field \'blablabla\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And("I press Sign In button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.Then("I do not sign in to account and got error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does possible to sign in with empty password field")]
        [NUnit.Framework.CategoryAttribute("DoesPossibleToSignInWithEmptyPasswordField")]
        public virtual void DoesPossibleToSignInWithEmptyPasswordField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does possible to sign in with empty password field", null, new string[] {
                        "DoesPossibleToSignInWithEmptyPasswordField"});
#line 126
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 127
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 128
 testRunner.When("I fill in email field \'blablabla@bla.bla\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 129
 testRunner.And("I fill in password field \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.And("I press Sign In button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.Then("I do not sign in to account and got error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does exist Forgot Password button")]
        [NUnit.Framework.CategoryAttribute("DoesExistForgotPasswordButton")]
        public virtual void DoesExistForgotPasswordButton()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does exist Forgot Password button", null, new string[] {
                        "DoesExistForgotPasswordButton"});
#line 134
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 135
 testRunner.Given("I have an URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 136
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
 testRunner.Then("Forgot password button is exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does Forgot Password window opens")]
        [NUnit.Framework.CategoryAttribute("DoesForgPassWindowOpens")]
        public virtual void DoesForgotPasswordWindowOpens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does Forgot Password window opens", null, new string[] {
                        "DoesForgPassWindowOpens"});
#line 140
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 141
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 142
 testRunner.When("I press Forgot Password button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.Then("Forgot Password modal window is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does theme changes in setting modal window")]
        [NUnit.Framework.CategoryAttribute("DoesThemeChanges")]
        public virtual void DoesThemeChangesInSettingModalWindow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does theme changes in setting modal window", null, new string[] {
                        "DoesThemeChanges"});
#line 146
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 147
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 148
 testRunner.When("I open Settings modal window", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
 testRunner.And("I chose new theme \'dark\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.Then("Theme is changed to \'dark\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does error displays when entered not valid data")]
        [NUnit.Framework.CategoryAttribute("ValidationErrorWhenFillIncorrectFormatEmail")]
        public virtual void DoesErrorDisplaysWhenEnteredNotValidData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does error displays when entered not valid data", null, new string[] {
                        "ValidationErrorWhenFillIncorrectFormatEmail"});
#line 153
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 154
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 155
 testRunner.When("I fill in email field \'123456qwerty\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 156
 testRunner.And("I fill in password field \'blablabla\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
 testRunner.And("I press Sign In button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.Then("I do not sign in to account and got error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does possible to fill data in email field in email format like user@user.user")]
        [NUnit.Framework.CategoryAttribute("DoesPossibleToFillDataInEmailFieldInEmailFormat")]
        public virtual void DoesPossibleToFillDataInEmailFieldInEmailFormatLikeUserUser_User()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does possible to fill data in email field in email format like user@user.user", null, new string[] {
                        "DoesPossibleToFillDataInEmailFieldInEmailFormat"});
#line 161
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 162
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 163
 testRunner.When("I fill in email field \'blabla@bla.bla\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 164
 testRunner.Then("Value in email field equals \'blabla@bla.bla\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does email field have a properly label")]
        [NUnit.Framework.CategoryAttribute("LabelOfEmailField")]
        public virtual void DoesEmailFieldHaveAProperlyLabel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does email field have a properly label", null, new string[] {
                        "LabelOfEmailField"});
#line 167
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 168
 testRunner.Given("I have an URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 169
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 170
 testRunner.Then("Label of Email field is \'E-mail\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does password field have a properly label")]
        [NUnit.Framework.CategoryAttribute("LabelOfPasswordField")]
        public virtual void DoesPasswordFieldHaveAProperlyLabel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does password field have a properly label", null, new string[] {
                        "LabelOfPasswordField"});
#line 173
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 174
 testRunner.Given("I have an URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 175
 testRunner.When("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 176
 testRunner.Then("Label of Password field is \'Password\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does appear error when fill invalid data in email field")]
        [NUnit.Framework.CategoryAttribute("ErrorWhenFillInvalidEmailData")]
        public virtual void DoesAppearErrorWhenFillInvalidDataInEmailField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does appear error when fill invalid data in email field", null, new string[] {
                        "ErrorWhenFillInvalidEmailData"});
#line 179
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 180
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 181
 testRunner.When("I fill in email field \'@@@@@@@@@@\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 182
 testRunner.And("I fill in password field \'blablabla\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.And("I press Sign In button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.Then("I got error \'Incorrect e-mail or password\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Does appear error when fill invalid data in password field")]
        [NUnit.Framework.CategoryAttribute("ErrorWhenFillInvalidPasswordData")]
        public virtual void DoesAppearErrorWhenFillInvalidDataInPasswordField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does appear error when fill invalid data in password field", null, new string[] {
                        "ErrorWhenFillInvalidPasswordData"});
#line 187
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 188
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 189
 testRunner.When("I fill in email field \'qwe@qwe.qweqwe\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 190
 testRunner.And("I fill in password field \'$%^&*$%^&*%^&*(\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
 testRunner.And("I press Sign In button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.Then("I got error \'Incorrect e-mail or password\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check that after the user has entered valid data, when we click on the \"restore p" +
            "assword\" button, we see a message about sending a new password to the specified " +
            "mail")]
        [NUnit.Framework.CategoryAttribute("CheckRestorePassword")]
        [NUnit.Framework.TestCaseAttribute("\'evgenijbelenihin.don@gmail.com\'", "0557817886", "\'Your password have been send!\'", null)]
        [NUnit.Framework.TestCaseAttribute("\'blablabla@bla.bla\'", "2582375923567", "\'Error\'", null)]
        [NUnit.Framework.TestCaseAttribute("\'teacher@teacher.com\'", "0000000001", "\'Incorrect email or phone number\'", null)]
        [NUnit.Framework.TestCaseAttribute("\'student@gmail.com\'", "0000000000", "\'Your password have been send!\'", null)]
        [NUnit.Framework.TestCaseAttribute("\'ms.marinkaaa17@gmail.com\'", "0501731362", "\'Your password have been send!\'", null)]
        public virtual void CheckThatAfterTheUserHasEnteredValidDataWhenWeClickOnTheRestorePasswordButtonWeSeeAMessageAboutSendingANewPasswordToTheSpecifiedMail(string email, string phoneNumber, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CheckRestorePassword"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check that after the user has entered valid data, when we click on the \"restore p" +
                    "assword\" button, we see a message about sending a new password to the specified " +
                    "mail", null, @__tags);
#line 195
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 196
 testRunner.Given("I open Sign In page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 197
 testRunner.And("I press forgot password button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
 testRunner.When(string.Format("I fill email {0} from table", email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 199
 testRunner.And(string.Format("I fill phone number {0} from table", phoneNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.And("I press Restore password button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
 testRunner.Then(string.Format("{0} is displayed", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

